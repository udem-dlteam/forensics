(define-syntax import
  (syntax-rules ()
    ((import stuff ...)
     (begin) ;; do nothing
     )))
(define-syntax when
  (syntax-rules ()
    ((when a b c ...)
     (if a (begin b c ...)))))
(define-syntax unless
  (syntax-rules ()
    ((unless a b c ...)
     (if (not a) (begin b c ...)))))
(define (jiffies-per-second) 1)
(define (current-jiffy) (with-input-from-file "/proc/uptime" read))
(define (current-second) (with-input-from-file "/proc/uptime" read))
(define (call-with-values thunk receiver)
  (let ((values (thunk)))
    (apply receiver values)))
(define (values . rest)
  (if (= (length rest) 1)
      (car rest)
      rest))
(define (this-scheme-implementation-name)
  (string-append "stalin-" "unknown"))
(define (flush-output-port x) x)
(define inexact exact->inexact)
(define exact inexact->exact)
(define (error . args)
  (display "error: ")
  (for-each display args)
  (newline))
(define (exact-integer? x)
  (and (exact? x)
       (integer? x)))
(define (vector-map fun vec)
  (let ((res (make-vector (vector-length vec))))
    (do ((i 0 (+ i 1)))
        ((= i (vector-length res)) res)
      (vector-set! res i (fun (vector-ref vec i))))))
